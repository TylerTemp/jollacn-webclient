// import { observable, computed, action, configure } from 'mobx';
// import {observable, computed, action, configure, decorate, autorun} from 'mobx';
import axios from 'axios';
// configure({enforceActions: 'strict'});
// configure({enforceActions: 'always'});


class TieCache {

  constructor() {
    // autorun(() => console.log(this.report));
    this.cache_limit = 1000;
    this.tie_id_buffer = [];
    this.id_to_ties = {};
  }

  addTie(tie) {
    return this.addTies([tie]);
  }

  addTies(ties) {
    let tie_id_buffer = this.tie_id_buffer;
    const limit = this.cache_limit;
    const overflow_count = tie_id_buffer.length + ties.length - limit;
    let removed_tie_ids = tie_id_buffer.concat(
      ties.map((tie, _index) => { return tie['id']; })
    );
    let updated_tie_ids = removed_tie_ids.splice(overflow_count - 1);
    ties.map((new_tie, _index) => {
      const tie_id = new_tie['id'];
      console.log(`adding tie cache ${tie_id}`);
      this.id_to_ties[tie_id] = new_tie;
    });

    removed_tie_ids.map((tie_id, _index) => {
      // const tie_id = removed_tie['id'];
      console.log(`removing tie cache ${tie_id}`);
      delete this.id_to_ties[tie_id];
    });
    this.ties = updated_ties;
  }

  fetchTie(promise, tie_id) {
    const cached_tie = this.id_to_ties[tie_id];
    if(cached_tie) {
      return promise.resolve(cached_tie);
    };

    return axios.get(`/api/tie/${tie_id}`, {
        headers: {'Accept': 'application/json'},
        transformResponse: undefined
      })
      .then(res => {
        var data = res.data;
        var tie = JSON.parse(data);
        return promise.resolve(tie);
      })
      .catch(res => {
        var error = 'unknown server error';
        if (res.response) {
            // The request was made and the server responded with a status code
          // that falls out of the range of 2xx
          var data = res.response.data;
          console.log('response', data);
          var json_resp = null;
          try {
            json_resp = JSON.parse(data);
          } catch (e) {
            // console.log(res.response);
            error = `${res.response.status} ${res.response.statusText}`;
          };
          if(json_resp) {
            error = json_resp.message || error;
          };
        } else {
          // Something happened in setting up the request that triggered an Error
          console.log('Error', res);
          error = resp.message;
        };
        console.log('set error to', error);
        // this.setState({error: error});
        // this.apiFailed(error);
        promise.reject(error);
      })
      .then(() => {
        console.log(`fetch tie remote ${tie_id} finished`);
      });
  }

  // @action apiSucceed(tie) {
  //   this.setCurrentTie(tie);
  //   this.addTie(tie);
  // }
  //
  // @action apiFailed(error) {
  //   this.loaded = true;
  //   this.error = error;
  // }
  //
  // @action apiAlways() {
  //   this.loaded = true;
  // }
  //
  // setCurrentTie(tie) {
  //   this.tie_id = tie_id;
  //   this.tie = tie;
  //   this.loaded = true;
  //   this.error = null;
  // }
  //
  // @action preFetchTie(tie_id) {
  //   const cached_tie = this.id_to_ties[tie_id];
  //   if(cached_tie) {
  //     this.setCurrentTie(tie);
  //     console.log(`tie ${tie_id} from cache`);
  //     return false;  // no need to pre-fetch
  //   };
  //
  //   this.loaded = false;
  //   this.error = null;
  //   axios.get(`/api/tie/${tie_id}`, {transformResponse: undefined})
  //     .then(res => {
  //       var data = res.data;
  //       var tie = JSON.parse(data);
  //       this.apiSucceed(tie);
  //     })
  //     .catch(res => {
  //       var error = 'unknown server error';
  //       if (res.response) {
  //           // The request was made and the server responded with a status code
  //         // that falls out of the range of 2xx
  //         var data = res.response.data;
  //         console.log('response', data);
  //         var json_resp = null;
  //         try {
  //           json_resp = JSON.parse(data);
  //         } catch (e) {
  //           // console.log(res.response);
  //           error = `${res.response.status} ${res.response.statusText}`;
  //         };
  //         if(json_resp) {
  //           error = json_resp.message || error;
  //         };
  //       } else {
  //         // Something happened in setting up the request that triggered an Error
  //         console.log('Error', res);
  //         error = resp.message;
  //       };
  //       console.log('set error to', error);
  //       // this.setState({error: error});
  //       this.apiFailed(error);
  //     })
  //     .then(() => {
  //       // console.log('always');
  //       this.apiAlways();
  //     });
  //   return true;  // yes, need to wait for the remote
  // }
}


// const tieStore = new TieStore();
//
//
// export default tieStore;


const tieCache = new TieCache();

export default tieCache;
